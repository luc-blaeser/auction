type Principal = principal;
type Item = record {
    description : text;
    image : blob;
    title : text;
};
type Bid = record {
    originator : Principal;
    price : nat;
    time : nat;
};
type AuctionOverview = record {
    id : AuctionId;
    item : Item;
};
type AuctionId = nat;
type AuctionDetails = record {
    bidHistory : vec Bid;
    item : Item;
    remainingTime : nat;
};
service backend : {
    /// Retrieve the detail information of auction by its id.
    /// The returned detail contain status about whether the auction is active or closed,
    /// and the bids made so far.
    getAuctionDetails : (AuctionId) -> (AuctionDetails);
    /// Retrieve all auctions (open and closed) with their ids and reduced overview information.
    /// Specific auctions can be separately retrieved by `getAuctionDetail`.
    getOverviewList : () -> (vec AuctionOverview);
    /// Make a new bid for a specific auction specified by the id.
    /// Checks that:
    /// * The user is authenticated.
    /// * The price is valid, higher than the last bid, if existing.
    /// * The auction is still open (not finished).
    /// If valid, the bid is appended to the bid history.
    /// Otherwise, traps with an error.
    makeBid : (AuctionId, nat) -> ();
    /// Register a new auction that is open for the defined duration.
    newAuction : (Item, nat) -> ();
};
